import numpy as np
import matplotlib.pyplot as plt
# plt.figure(dpi=150)
# plt.figure(figsize=(3.375,0.75*3.375),dpi=200)
# dat=np.loadtxt('displacement.csv',delimiter=',')
# plt.plot(dat[:,0],dat[:,1])
# plt.plot(dat[:,0],10**2.9*dat[:,0]**2)







def Nexp(K, alpha, epsilon, k):
    return np.ceil(3 * K * alpha * alpha * k * (25 / 3) ** k * ((2 * alpha * K) / epsilon) ** (1 / (2 * k)))

def calc_number_Newton_iterations(epsilon, Nexp, alpha):
    target_error = epsilon/(2 * alpha * Nexp)
    m = 2
    if target_error < 1e-4:
        m = 3
    if target_error < 1e-6:
        m = 4
    if target_error < 1e-12:
        assert False, "Target error too small"
    return m

def calc_number_gates(fockstates, alpha, epsilon,p):
    gates=np.zeros(fockstates.size)
    for K in fockstates:
        if K < 1:
            raise ValueError("K must be at least 1")
        Nexp_value = Nexp(K, alpha, epsilon, p) # second order Trotter
        m = calc_number_Newton_iterations(epsilon, Nexp_value, alpha)
        gates[K-1] = Nexp_value * (oneexp(K, m)) 
    return gates

fockstate=np.arange(1,2**5,1)
fockstate=np.arange(1,2**10,1)
plt.plot(fockstate,calc_number_gates(fockstate, 1, 0.001,1),color='gray',label=r'Full $\alpha=1,\epsilon=10^{-3}$')

def oneexp(fockstate,m):
    nqubits=np.ceil(np.log2(fockstate+1))
    return (270*m+ 126)*nqubits**2 + (144 + 228*m)*nqubits-12*m-22
fockstate=np.arange(1,2**10,1)
plt.plot(fockstate,oneexp(fockstate,2),'--',label='One exponential, m=2',color='gray')
# plt.plot(fockstate,calc_number_gates(fockstate, 1, 0.001,1),'--',color='gray',label=r'Full $\alpha=1,\epsilon=10^{-3}, p=4$')
def arb_decomp(n):
    N=np.ceil(np.log2(n+1))
    return np.ceil((22/48)*4**N - (3/2)*2**N + (5/3))
plt.plot(fockstate,arb_decomp(fockstate),label='Brute force',color='black')
fockstate=np.arange(2**5-1,2**10,1)
plt.plot(fockstate,arb_decomp(fockstate),color='black',ls='--')
fockstate=np.arange(1,2**10,1)
plt.plot(fockstate,np.ones(fockstate.size),label='Bosonic',color='darkred')
plt.yscale('log')
plt.xscale('log')
plt.xticks([1,10,100,1000],labels=['1','10','100','1000'])
plt.xlabel("Cutoff")
plt.xlim(1, 1000)
plt.ylabel("Gates")
plt.legend(loc='upper left')
plt.tight_layout(pad=0.0)
# plt.savefig("complexity.pdf")

plt.show()